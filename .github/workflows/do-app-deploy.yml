name: deploy-do-app

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "Commit SHA to deploy (defaults to triggering build's head_sha)"
        type: string
        required: false
      worker_only:
        description: "Deploy only preview-worker image"
        type: boolean
        default: false
  workflow_run:
    workflows: ["build-push-docr"]
    types: ["completed"]

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Ensure we deploy based on the triggering commit of build workflow
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}
      - name: Install yq (Linux AMD64)
        shell: bash
        run: |
          set -e
          curl -fsSL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version
      - name: Prepare spec from live app (preserve envs)
        id: spec
        shell: bash
        env:
          DEPLOY_SHA: ${{ inputs.sha || github.event.workflow_run.head_sha || github.sha }}
        run: |
          set -e
          # Fetch current live spec to preserve secrets like REDIS_URL
          APP_ID=$(doctl apps list --no-header --format ID,Spec.Name | awk '$2=="motionmavericks"{print $1}' | head -n1 || true)
          if [ -z "$APP_ID" ]; then
            echo "App not found; creating from repo spec" >&2
            cp deploy/do-app.yaml spec.yaml
          else
            doctl apps get "$APP_ID" -o json | jq '.[0].spec' > spec.json
            yq -P spec.json > spec.yaml
          fi
          TAG="sha-${DEPLOY_SHA}"
          echo "Using TAG=$TAG (DEPLOY_SHA=$DEPLOY_SHA)"
          # Determine which images exist in DOCR for this TAG; only bump those
          has_tag() {
            local repo="$1"; local tag="$2"
            doctl registry repository list-tags "$repo" --no-header --format Tag 2>/dev/null | awk -v t="$tag" '$1==t{ok=1} END{exit ok?0:1}'
          }

          BACKEND_CHANGED=false
          WORKER_CHANGED=false
          FRONTEND_CHANGED=false

          if has_tag "mm-motionmav-reg/backend" "$TAG"; then BACKEND_CHANGED=true; fi
          if has_tag "mm-motionmav-reg/worker" "$TAG";  then WORKER_CHANGED=true;  fi
          if has_tag "mm-motionmav-reg/frontend" "$TAG"; then FRONTEND_CHANGED=true; fi

          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "worker_changed=$WORKER_CHANGED"   >> $GITHUB_OUTPUT
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT

          # Respect manual override to deploy worker only
          if [ "${{ inputs.worker_only }}" = "true" ]; then
            BACKEND_CHANGED=false
            FRONTEND_CHANGED=false
          fi

          # Update image tags only where the sha tag exists
          if [ "$BACKEND_CHANGED" = "true" ]; then
            yq -i '.services[] |= (select(.name=="backend") | .image.tag = strenv(TAG))' spec.yaml
          fi
          if [ "$WORKER_CHANGED" = "true" ]; then
            yq -i '.workers[]  |= (select(.name=="preview-worker") | .image.tag = strenv(TAG))' spec.yaml
          fi
          if [ "$FRONTEND_CHANGED" = "true" ]; then
            yq -i '.services[] |= (select(.name=="frontend") | .image.tag = strenv(TAG))' spec.yaml
          fi
          echo "spec=spec.yaml" >> $GITHUB_OUTPUT
      - name: Show spec summary (debug)
        shell: bash
        run: |
          set -e
          echo "--- spec.yaml (head) ---"
          sed -n '1,120p' spec.yaml
          echo "--- services image blocks ---"
          yq '.services[].image' spec.yaml
          echo "--- workers image blocks ---"
          yq '.workers[].image' spec.yaml
      - name: Try update existing app, else create
        shell: bash
        run: |
          set -e
          APP_ID=$(doctl apps list --no-header --format ID,Spec.Name | awk '$2=="motionmavericks"{print $1}' | head -n1 || true)
          if [ -n "$APP_ID" ]; then
            echo "Updating App $APP_ID from prepared spec.yaml"
            doctl apps update "$APP_ID" --spec spec.yaml --wait || exit 1
          else
            echo "Creating App from prepared spec.yaml"
            doctl apps create --spec spec.yaml --wait || exit 1
          fi
          echo "Apps summary:" && doctl apps list --no-header --format ID,Spec.Name,DefaultIngress,UpdatedAt | head -n 5
